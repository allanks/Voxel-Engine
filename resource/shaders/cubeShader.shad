#version 450

uniform vec3 offset;
uniform float length;
uniform mat4 normalMatrix;

layout(std140,binding=0) uniform State {
    mat4 projection;
    mat4 camera;
}state;

layout(std140,binding=1) uniform Sun {
    vec4 vColor;
    vec4 vDirection;
    float intensity;
}sun;

layout(std430,binding=0) buffer texture_data {
	vec2 textureData[];
}texData;

layout(location=0) in vec3 vert; // vertex position
layout(location=1) in vec3 normal; // normal position
layout(location=2) in vec4 object; // instance data, unique to each object (instance)

in int gl_VertexID;

out vec2 fragData;
out vec4 sunlight;

void main() {
   int ind = gl_VertexID+(int(object.w*length));
   fragData = texData.textureData[ind];
   gl_Position = state.projection * state.camera * (vec4(vert + vec3(object.x + offset.x, object.y + offset.y, object.z+offset.z), 1));
   vec4 vRes = normalMatrix*vec4(normal, 0.0); 
   vec3 vNormal = vRes.xyz;
   float diffuse = max(0.0, dot(normalize(vNormal), -sun.vDirection.xyz));
   sunlight = vec4(sun.vColor.xyz*(sun.intensity+diffuse),1.0);
}